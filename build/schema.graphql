type Cat @entity {
  id: ID!
  owner: Owner!
  rescueTimestamp: BigInt!
  isWrapped: Boolean!
  name: String
  provenance: Provenance
  activeRequest: RequestPrice
  activeOffer: OfferPrice
}

"many side is derived, one side in Cat is stored"
type Owner @entity {
  id: ID!
  cats: [Cat!]! @derivedFrom(field: "owner")
}

type RequestPrice @entity {
  id: ID!
  provenance: Provenance!
  price: BigInt!
  from: Bytes!
  timestamp: BigInt!
  "filled denotes if the price was filled"
  filled: Boolean!
  "one bit is redundant. can only be in the set {f:true,a:false},{f:false,a:false},{f:false,a:true}. denoting filled historic, cancelled historic and active. sometimes offers and requests are cancelled before they are filled."
  active: Boolean!
}

type OfferPrice @entity {
  id: ID!
  provenance: Provenance!
  price: BigInt!
  to: Bytes!
  timestamp: BigInt!
  filled: Boolean!
  active: Boolean!
}

type Provenance @entity {
  id: ID!
  requestPrices: [RequestPrice!] @derivedFrom(field: "provenance")
  offerPrices: [OfferPrice!] @derivedFrom(field: "provenance")
}